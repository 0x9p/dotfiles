#!/bin/bash

set -e

# ============================================
# Friday Task Management System - Setup
# ============================================

# Colors for output
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m' # No Color

# Directories
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"
readonly TEMPLATES_DIR="$DOTFILES_DIR/friday/00_templates"

# ============================================
# Helper Functions
# ============================================

log_info() {
    echo -e "${BLUE}$1${NC}"
}

log_success() {
    echo -e "${GREEN}$1${NC}"
}

log_warning() {
    echo -e "${YELLOW}$1${NC}"
}

log_error() {
    echo -e "${RED}$1${NC}"
}

prompt_user() {
    local prompt_text="$1"
    local var_name="$2"
    
    echo -e "${YELLOW}${prompt_text}${NC}"
    read -e -p "> " "$var_name"
}

expand_path() {
    local path="$1"
    echo "${path/#\~/$HOME}"
}

# ============================================
# Knowledge Base Setup
# ============================================

create_friday_directory() {
    local kb_dir="$1"
    
    if [ ! -d "$kb_dir" ]; then
        log_warning "Directory doesn't exist. Create it? (y/n)"
        read -p "> " create_response
        
        if [[ ! "$create_response" =~ ^[Yy]$ ]]; then
            log_error "Setup cancelled."
            exit 1
        fi
        
        mkdir -p "$kb_dir"
        log_success "✅ Created Friday directory"
    fi
    
    # Ensure subdirectories exist
    mkdir -p "$kb_dir"/{00_templates,01_daily,02_tasks}
    log_info "✅ Created/verified subdirectories"
}

copy_templates() {
    local kb_dir="$1"
    
    log_info "📄 Copying templates..."
    mkdir -p "$kb_dir/00_templates"
    
    cp "$TEMPLATES_DIR/daily_tasks_template.md" "$kb_dir/00_templates/"
    cp "$TEMPLATES_DIR/simple_task_template.md" "$kb_dir/00_templates/"
}

create_config_file() {
    local kb_dir="$1"
    local task_prefix="$2"
    
    log_info "📝 Creating .friday config file..."
    
    cat > "$kb_dir/.friday" << EOF
# Friday Task Management Configuration
# Auto-generated by setup-friday.sh

# Task prefix (e.g., TASK, PROJ, WORK, etc.)
export TASK_PREFIX="$task_prefix"
EOF
}

# ============================================
# Shell Integration
# ============================================

backup_zshrc() {
    if [ ! -f "$HOME/.zshrc" ]; then
        return 0
    fi
    
    local backup_file="$HOME/.zshrc.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$HOME/.zshrc" "$backup_file"
    log_success "✅ Backed up .zshrc to $backup_file"
}

remove_old_functions() {
    if ! grep -q "# Knowledge Management Functions" "$HOME/.zshrc" 2>/dev/null; then
        return 0
    fi
    
    log_warning "Knowledge management functions already exist in .zshrc"
    log_warning "Remove old functions? (y/n)"
    read -p "> " remove_response
    
    if [[ ! "$remove_response" =~ ^[Yy]$ ]]; then
        return 0
    fi
    
    awk '
        /# Knowledge Management Functions/ { skip=1 }
        skip && /^$/ { skip=0; next }
        !skip { print }
    ' "$HOME/.zshrc" > "$HOME/.zshrc.tmp"
    
    mv "$HOME/.zshrc.tmp" "$HOME/.zshrc"
    log_success "✅ Removed old functions"
}

install_shell_functions() {
    local kb_dir="$1"
    local task_prefix="$2"
    
    # Create temporary file for functions
    local temp_functions=$(mktemp)
    
    cat > "$temp_functions" <<'FUNCTIONS_EOF'

# ============================================
# Friday Knowledge Management Functions
# ============================================

# Configuration - will be overridden by .friday file if found
export KNOWLEDGE_DIR="__KB_DIR__"
export TASK_PREFIX="__TASK_PREFIX__"

# ============================================
# Internal Helper Functions
# ============================================

# Find knowledge base root by looking for .friday config file
_friday_find_root() {
    local current_dir="$PWD"
    
    while [ "$current_dir" != "/" ]; do
        if [ -f "$current_dir/.friday" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    return 1
}

# Load configuration from .friday file
_friday_load_config() {
    local root
    root=$(_friday_find_root)
    
    if [ -n "$root" ]; then
        source "$root/.friday"
        export KNOWLEDGE_DIR="$root"
        return 0
    fi
    
    return 1
}

# Check if we're in a Friday base
_friday_check_kb() {
    if ! _friday_load_config; then
        echo "❌ Not in a Friday base."
        echo "   Run 'cd <friday-directory>' first or run setup-friday.sh"
        return 1
    fi
    return 0
}

# ============================================
# Public Commands
# ============================================

# Show help message
friday-help() {
    _friday_load_config
    
    echo "📚 Friday - Knowledge Management System"
    echo ""
    echo "Available commands:"
    echo ""
    echo "  📅 Daily Management:"
    echo "    friday-new-daily                    Create/open today's daily task file"
    echo "    friday-list-daily                   Preview today's daily tasks"
    echo ""
    echo "  ✅ Task Management:"
    echo "    friday-new-task <name>              Create new task with auto-incrementing number"
    echo "    friday-list-tasks                   List all tasks"
    echo ""
    echo "  🔧 Task Operations:"
    echo "    friday-set-status <num> <status>    Set task status"
    echo "    friday-set-priority <num> <priority> Set task priority"
    echo "    friday-set-parent <num> <parent>    Set parent task"
    echo ""
    echo "  ℹ️  Help:"
    echo "    friday-help                         Show this help message"
    echo ""
    echo "  🚀 Short Aliases:"
    echo "    fnd                                 Alias for friday-new-daily"
    echo "    fnt <name>                          Alias for friday-new-task"
    echo "    fld                                 Alias for friday-list-daily"
    echo "    flt                                 Alias for friday-list-tasks"
    echo "    fss <num> <status>                  Alias for friday-set-status"
    echo "    fsp <num> <priority>                Alias for friday-set-priority"
    echo "    fspt <num> <parent>                 Alias for friday-set-parent"
    echo "    fh                                  Alias for friday-help"
    echo ""
    echo "Status values:"
    echo "  todo, progress, in_progress, review, in_review, testing, in_testing, blocked, done"
    echo ""
    echo "Priority values:"
    echo "  high, medium, low"
    echo ""
    echo "Configuration:"
    echo "  KNOWLEDGE_DIR: $KNOWLEDGE_DIR"
    echo "  TASK_PREFIX: $TASK_PREFIX"
}

# Create or open today's daily task file
friday-new-daily() {
    _friday_check_kb || return 1
    
    local today=$(date +%Y_%m_%d)
    local daily_file="$KNOWLEDGE_DIR/01_daily/${today}.md"
    local template="$KNOWLEDGE_DIR/00_templates/daily_tasks_template.md"
    
    # Check if file already exists
    if [ -f "$daily_file" ]; then
        echo "✅ Daily file already exists"
        echo "📄 $daily_file"
        return 0
    fi
    
    # Check if template exists
    if [ ! -f "$template" ]; then
        echo "❌ Template not found: $template"
        return 1
    fi
    
    # Create daily file from template
    local display_date=$(date +%Y-%m-%d)
    sed "s/{{date}}/$display_date/g" "$template" > "$daily_file"
    
    echo "✅ Created daily file"
    echo "📄 $daily_file"
}

# Create new task
friday-new-task() {
    _friday_check_kb || return 1
    
    if [ -z "$1" ]; then
        echo "Usage: friday-new-task <task name>"
        echo "Example: friday-new-task \"Implement authentication feature\""
        return 1
    fi
    
    local task_name="$*"
    local template="$KNOWLEDGE_DIR/00_templates/simple_task_template.md"
    
    # Check if template exists
    if [ ! -f "$template" ]; then
        echo "❌ Template not found: $template"
        return 1
    fi
    
    # Generate task ID
    local next_number=1
    local tasks_dir="$KNOWLEDGE_DIR/02_tasks"
    
    if [ -d "$tasks_dir" ]; then
        local max_number=$(ls "$tasks_dir/${TASK_PREFIX}"* 2>/dev/null | \
            sed "s/.*${TASK_PREFIX}\([0-9]*\).*/\1/" | \
            sort -n | \
            tail -1)
        
        if [ -n "$max_number" ]; then
            next_number=$((max_number + 1))
        fi
    fi
    
    local task_id="${TASK_PREFIX}${next_number}"
    
    # Clean task name (lowercase, remove special chars)
    local clean_name=$(echo "$task_name" | \
        tr '[:upper:]' '[:lower:]' | \
        sed 's/[^a-z0-9 ]//g' | \
        tr ' ' '_')
    
    local filename="${task_id}_${clean_name}.md"
    local filepath="$tasks_dir/$filename"
    
    # Create task file from template
    sed "s/{{title}}/$task_name/g" "$template" > "$filepath"
    echo "✅ Created task: $task_id"
    echo "📄 $filepath"
    
    # Add task to today's daily file
    local today=$(date +%Y_%m_%d)
    local daily_file="$KNOWLEDGE_DIR/01_daily/${today}.md"
    
    if [ ! -f "$daily_file" ]; then
        echo ""
        echo "📝 Creating today's daily file..."
        friday-new-daily
        echo ""
    fi
    
    # Add task link to daily file
    local task_link="- [ ] [🎯 ${task_id}: ${task_name}](../02_tasks/${filename})"
    
    if grep -q "## 📌 Tasks" "$daily_file"; then
        awk -v task="$task_link" '
            /^<!-- Mark tasks as done by checking the box -->$/ {
                print
                print ""
                print task
                next
            }
            { print }
        ' "$daily_file" > "${daily_file}.tmp"
        
        mv "${daily_file}.tmp" "$daily_file"
        echo "✅ Added to today's daily file"
    fi
}

# Preview today's daily tasks
friday-list-daily() {
    _friday_check_kb || return 1
    
    local today=$(date +%Y_%m_%d)
    local daily_file="$KNOWLEDGE_DIR/01_daily/${today}.md"
    
    if [ -f "$daily_file" ]; then
        glow "$daily_file"
    else
        echo "No daily file for today. Run 'friday-new-daily' to create one."
    fi
}

# List all tasks
friday-list-tasks() {
    _friday_check_kb || return 1
    
    echo "📋 All tasks in 02_tasks:"
    ls -1 "$KNOWLEDGE_DIR/02_tasks/" 2>/dev/null || echo "No tasks found."
}

# Set task status
friday-set-status() {
    _friday_check_kb || return 1
    
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: friday-set-status <task_number> <status>"
        echo ""
        echo "Available statuses:"
        echo "  todo, progress, in_progress, review, in_review,"
        echo "  testing, in_testing, blocked, done"
        return 1
    fi
    
    local task_num="$1"
    local status="$2"
    local tasks_dir="$KNOWLEDGE_DIR/02_tasks"
    
    # Find task file
    local task_file=$(ls "$tasks_dir/${TASK_PREFIX}${task_num}_"* 2>/dev/null | head -1)
    
    if [ -z "$task_file" ]; then
        echo "❌ Task ${TASK_PREFIX}${task_num} not found"
        return 1
    fi
    
    # Backup file
    cp "$task_file" "${task_file}.bak"
    
    # Uncheck all status checkboxes
    sed -i .bak 's/^- \[x\] ⏳ \*\*TODO\*\*/- [ ] ⏳ **TODO**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] 🚀 \*\*IN PROGRESS\*\*/- [ ] 🚀 **IN PROGRESS**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] 🔍 \*\*IN REVIEW\*\*/- [ ] 🔍 **IN REVIEW**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] 🧪 \*\*IN TESTING\*\*/- [ ] 🧪 **IN TESTING**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] ⛔ \*\*BLOCKED\*\*/- [ ] ⛔ **BLOCKED**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] ✅ \*\*DONE\*\*/- [ ] ✅ **DONE**/' "$task_file" && rm -f "${task_file}.bak"
    
    # Set the requested status
    case "$status" in
        todo)
            sed -i .bak 's/^- \[ \] ⏳ \*\*TODO\*\*/- [x] ⏳ **TODO**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to TODO"
            ;;
        progress|in_progress)
            sed -i .bak 's/^- \[ \] 🚀 \*\*IN PROGRESS\*\*/- [x] 🚀 **IN PROGRESS**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to IN PROGRESS"
            ;;
        review|in_review)
            sed -i .bak 's/^- \[ \] 🔍 \*\*IN REVIEW\*\*/- [x] 🔍 **IN REVIEW**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to IN REVIEW"
            ;;
        testing|in_testing)
            sed -i .bak 's/^- \[ \] 🧪 \*\*IN TESTING\*\*/- [x] 🧪 **IN TESTING**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to IN TESTING"
            ;;
        blocked)
            sed -i .bak 's/^- \[ \] ⛔ \*\*BLOCKED\*\*/- [x] ⛔ **BLOCKED**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to BLOCKED"
            ;;
        done)
            sed -i .bak 's/^- \[ \] ✅ \*\*DONE\*\*/- [x] ✅ **DONE**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} status to DONE"
            ;;
        *)
            echo "❌ Invalid status: $status"
            mv "${task_file}.bak" "$task_file"
            return 1
            ;;
    esac
    
    rm -f "${task_file}.bak"
}

# Set task priority
friday-set-priority() {
    _friday_check_kb || return 1
    
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: friday-set-priority <task_number> <priority>"
        echo ""
        echo "Available priorities: high, medium, low"
        return 1
    fi
    
    local task_num="$1"
    local priority="$2"
    local tasks_dir="$KNOWLEDGE_DIR/02_tasks"
    
    # Find task file
    local task_file=$(ls "$tasks_dir/${TASK_PREFIX}${task_num}_"* 2>/dev/null | head -1)
    
    if [ -z "$task_file" ]; then
        echo "❌ Task ${TASK_PREFIX}${task_num} not found"
        return 1
    fi
    
    # Backup file
    cp "$task_file" "${task_file}.bak"
    
    # Uncheck all priority checkboxes
    sed -i .bak 's/^- \[x\] 🔴 \*\*High\*\*/- [ ] 🔴 **High**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] 🟡 \*\*Medium\*\*/- [ ] 🟡 **Medium**/' "$task_file" && rm -f "${task_file}.bak"
    sed -i .bak 's/^- \[x\] 🟢 \*\*Low\*\*/- [ ] 🟢 **Low**/' "$task_file" && rm -f "${task_file}.bak"
    
    # Set the requested priority
    case "$priority" in
        high|h)
            sed -i .bak 's/^- \[ \] 🔴 \*\*High\*\*/- [x] 🔴 **High**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} priority to High"
            ;;
        medium|m)
            sed -i .bak 's/^- \[ \] 🟡 \*\*Medium\*\*/- [x] 🟡 **Medium**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} priority to Medium"
            ;;
        low|l)
            sed -i .bak 's/^- \[ \] 🟢 \*\*Low\*\*/- [x] 🟢 **Low**/' "$task_file" && rm -f "${task_file}.bak"
            echo "✅ Set ${TASK_PREFIX}${task_num} priority to Low"
            ;;
        *)
            echo "❌ Invalid priority: $priority"
            mv "${task_file}.bak" "$task_file"
            return 1
            ;;
    esac
    
    rm -f "${task_file}.bak"
}

# Set parent task
friday-set-parent() {
    _friday_check_kb || return 1
    
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: friday-set-parent <task_number> <parent_number>"
        echo ""
        echo "Set a single parent task (replaces existing parent if any)"
        echo ""
        echo "Examples:"
        echo "  friday-set-parent 5 2     # Set TASK2 as parent of TASK5"
        echo "  friday-set-parent 5 3     # Change parent to TASK3 (replaces TASK2)"
        echo "  friday-set-parent 5 none  # Remove parent from TASK5"
        return 1
    fi
    
    local task_num="$1"
    local parent_num="$2"
    local tasks_dir="$KNOWLEDGE_DIR/02_tasks"
    
    # Find task file
    local task_file=$(ls "$tasks_dir/${TASK_PREFIX}${task_num}_"* 2>/dev/null | head -1)
    
    if [ -z "$task_file" ]; then
        echo "❌ Task ${TASK_PREFIX}${task_num} not found"
        return 1
    fi
    
    # Backup file
    cp "$task_file" "${task_file}.bak"
    
    # Handle removal of parent
    if [ "$parent_num" = "none" ]; then
        awk '
            /^## 🔗 \*\*Parent Task\*\*/ {
                print
                getline; print
                getline; print
                print ""
                print "None"
                print ""
                skip = 1
                next
            }
            /^---$/ && skip {
                skip = 0
                print
                next
            }
            !skip { print }
        ' "$task_file" > "${task_file}.tmp"
        
        mv "${task_file}.tmp" "$task_file"
        rm -f "${task_file}.bak"
        echo "✅ Removed parent from ${TASK_PREFIX}${task_num}"
        return 0
    fi
    
    # Find parent task file
    local parent_file=$(ls "$tasks_dir/${TASK_PREFIX}${parent_num}_"* 2>/dev/null | head -1)
    
    if [ -z "$parent_file" ]; then
        echo "❌ Parent task ${TASK_PREFIX}${parent_num} not found"
        mv "${task_file}.bak" "$task_file"
        return 1
    fi
    
    # Get parent task filename
    local parent_filename=$(basename "$parent_file")
    local parent_title=$(sed -n 's/^# 🎯 \*\*\(.*\)\*\*$/\1/p' "$parent_file" | head -1)
    
    # Update parent task reference
    awk -v parent_id="${TASK_PREFIX}${parent_num}" \
        -v parent_filename="$parent_filename" \
        -v parent_title="$parent_title" '
        /^## 🔗 \*\*Parent Task\*\*/ {
            print
            getline; print
            getline; print
            print ""
            print "[🎯 " parent_id ": " parent_title "](../02_tasks/" parent_filename ")"
            print ""
            skip = 1
            next
        }
        /^---$/ && skip {
            skip = 0
            print
            next
        }
        !skip { print }
    ' "$task_file" > "${task_file}.tmp"
    
    mv "${task_file}.tmp" "$task_file"
    rm -f "${task_file}.bak"
    
    echo "✅ Set ${TASK_PREFIX}${parent_num} as parent of ${TASK_PREFIX}${task_num}"
}

# ============================================
# Short Aliases
# ============================================

alias fnd='friday-new-daily'
alias fnt='friday-new-task'
alias fld='friday-list-daily'
alias flt='friday-list-tasks'
alias fss='friday-set-status'
alias fsp='friday-set-priority'
alias fspt='friday-set-parent'
alias fh='friday-help'

FUNCTIONS_EOF
    
    # Replace placeholders
    sed -i .setup "s|__KB_DIR__|$kb_dir|g" "$temp_functions"
    sed -i .setup "s|__TASK_PREFIX__|$task_prefix|g" "$temp_functions"
    rm -f "${temp_functions}.setup"
    
    # Append to .zshrc
    cat "$temp_functions" >> "$HOME/.zshrc"
    
    # Clean up
    rm -f "$temp_functions"
}

# ============================================
# Main Setup Flow
# ============================================

main() {
    echo "🚀 Setting up Friday Task Management System"
    echo ""
    
    # Prompt for Friday directory
    prompt_user "Enter the full path to your Friday directory:" kb_path
    local kb_dir=$(expand_path "$kb_path")
    
    # Prompt for task prefix
    prompt_user "Enter task prefix (e.g., PROJ, TASK, WORK):" task_prefix
    
    echo ""
    
    # Create Friday base
    create_friday_directory "$kb_dir"
    copy_templates "$kb_dir"
    create_config_file "$kb_dir" "$task_prefix"
    
    log_success "✅ Friday base initialized at: $kb_dir"
    echo ""
    
    # Install shell functions
    backup_zshrc
    remove_old_functions
    install_shell_functions "$kb_dir" "$task_prefix"
    
    log_success "✅ Shell commands installed!"
    echo ""
    
    # Show summary
    echo "📝 Available commands:"
    echo "  friday-new-daily                    - Create/open today's daily task file"
    echo "  friday-new-task <name>              - Create new task"
    echo "  friday-list-daily                   - Preview today's tasks"
    echo "  friday-list-tasks                   - List all tasks"
    echo "  friday-set-status <num> <status>    - Set task status"
    echo "  friday-set-priority <num> <priority> - Set task priority"
    echo "  friday-set-parent <num> <parent>    - Set parent task"
    echo "  friday-help                         - Show detailed help"
    echo ""
    echo "🚀 Short aliases: fnd, fnt, fld, flt, fss, fsp, fspt, fh"
    echo ""
    echo "🔧 Configuration:"
    echo "  Friday Base: $kb_dir"
    echo "  Task Prefix: $task_prefix"
    echo "  Config File: $kb_dir/.friday"
    echo ""
    echo "⚠️  Run 'source ~/.zshrc' to activate commands in current shell"
    echo ""
    echo "💡 Tips:"
    echo "  - Navigate to your Friday directory to use Friday commands"
    echo "  - Commands automatically detect the .friday config file"
    echo "  - You can have multiple Friday bases with different prefixes"
}

# Run main setup
main
